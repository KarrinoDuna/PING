# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk, scrolledtext
import threading
import subprocess
import platform
import re
from collections import deque
import json
import os


class NetworkMonitor:
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ç–∏")
        self.root.geometry("1200x700")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_file = 'host_history.json'
        self.MAX_HISTORY_ENTRIES = 10
        self.host_history = []
        self.load_history()

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.host = tk.StringVar(value=self.host_history[0] if self.host_history else "ya.ru")
        self.ping_running = False
        self.trace_running = False

        # üåü –ù–û–í–û–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (ping.exe, tracert.exe)
        self.ping_process = None
        self.trace_process = None
        # ---------------------------------------------------------------------

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–Ω–≥–∞
        self.ping_stats = {
            'sent': 0,
            'received': 0,
            'lost': 0,
            'times': deque(maxlen=20)
        }

        self.create_widgets()
        self.setup_copy_paste()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ö–æ—Å—Ç–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
        try:
            if os.path.exists(self.history_file):
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        self.host_history = data
                    else:
                        self.host_history = ["ya.ru"]
            else:
                self.host_history = ["ya.ru"]
        except Exception:
            self.host_history = ["ya.ru"]

    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ö–æ—Å—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª."""
        try:
            self.update_history(self.host.get())

            with open(self.history_file, 'w', encoding='utf-8') as f:
                json.dump(self.host_history, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def terminate_processes(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã."""

        # 1. –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–∏–∫–ª—ã –≤ –ø–æ—Ç–æ–∫–∞—Ö
        self.ping_running = False

        # 2. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.ping_process and self.ping_process.poll() is None:
            try:
                self.ping_process.terminate()
                self.ping_process.wait(timeout=1)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            except Exception:
                pass
            self.ping_process = None

        # 3. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.trace_process and self.trace_process.poll() is None:
            try:
                self.trace_process.terminate()
                self.trace_process.wait(timeout=1)
            except Exception:
                pass
            self.trace_process = None

    def on_closing(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞."""
        self.terminate_processes()
        self.save_history()
        self.root.destroy()

    def update_history(self, current_host):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏: –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ö–æ—Å—Ç –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Å–ø–∏—Å–æ–∫."""
        current_host = current_host.strip()
        if not current_host:
            return

        try:
            self.host_history.remove(current_host)
        except ValueError:
            pass

        self.host_history.insert(0, current_host)
        self.host_history = self.host_history[:self.MAX_HISTORY_ENTRIES]
        self.host_combobox['values'] = self.host_history

    def create_widgets(self):
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.root, padding="10")
        control_frame.grid(row=0, column=0, columnspan=3, sticky="ew")

        ttk.Label(control_frame, text="–•–æ—Å—Ç:").grid(row=0, column=0, padx=5)

        self.host_combobox = ttk.Combobox(
            control_frame,
            textvariable=self.host,
            width=20,
            values=self.host_history,
            state='normal'
        )
        self.host_combobox.grid(row=0, column=1, padx=5)

        ttk.Button(control_frame, text="–°—Ç–∞—Ä—Ç –ø–∏–Ω–≥", command=self.start_ping).grid(row=0, column=2, padx=5)
        ttk.Button(control_frame, text="–°—Ç–æ–ø –ø–∏–Ω–≥", command=self.stop_ping).grid(row=0, column=3, padx=5)

        ttk.Button(control_frame, text="–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞", command=self.start_trace).grid(row=0, column=4, padx=5)
        ttk.Button(control_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self.clear_all).grid(row=0, column=5, padx=5)

        paned_window = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        paned_window.grid(row=1, column=0, columnspan=3, sticky="nsew", padx=10, pady=10)

        ping_frame = ttk.LabelFrame(paned_window, text="–ü–∏–Ω–≥ (live)", padding="5")
        paned_window.add(ping_frame, weight=1)
        self.ping_text = scrolledtext.ScrolledText(ping_frame, height=25, width=35, wrap=tk.WORD)
        self.ping_text.pack(fill=tk.BOTH, expand=True)

        stats_frame = ttk.LabelFrame(paned_window, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–Ω–≥–∞", padding="5")
        paned_window.add(stats_frame, weight=1)
        self.stats_text = scrolledtext.ScrolledText(stats_frame, height=25, width=30, wrap=tk.WORD)
        self.stats_text.pack(fill=tk.BOTH, expand=True)

        trace_frame = ttk.LabelFrame(paned_window, text="–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞", padding="5")
        paned_window.add(trace_frame, weight=1)
        self.trace_text = scrolledtext.ScrolledText(trace_frame, height=25, width=35, wrap=tk.WORD)
        self.trace_text.pack(fill=tk.BOTH, expand=True)

        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_columnconfigure(2, weight=1)

        self.update_stats_display()

    def setup_copy_paste(self):
        # ... (–ö–æ–¥ –¥–ª—è setup_copy_paste –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        def copy_text(event=None):
            widget = self.root.focus_get()
            if isinstance(widget, tk.Text):
                try:
                    widget.event_generate("<<Copy>>")
                except:
                    try:
                        text = widget.get(tk.SEL_FIRST, tk.SEL_LAST)
                        widget.clipboard_clear()
                        widget.clipboard_append(text)
                    except:
                        pass

        def create_context_menu(widget):
            menu = tk.Menu(widget, tearoff=0)
            menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=copy_text)
            menu.add_separator()
            menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ",
                             command=lambda: widget.tag_add(tk.SEL, "1.0", tk.END))

            def show_menu(event):
                menu.tk_popup(event.x_root, event.y_root)

            widget.bind("<Button-3>", show_menu)

        self.root.bind("<Control-c>", copy_text)
        self.root.bind("<Control-C>", copy_text)

        for widget in [self.ping_text, self.stats_text, self.trace_text]:
            create_context_menu(widget)
            widget.config(state='normal', exportselection=True)
            widget.bind("<Control-a>", lambda e: e.widget.tag_add(tk.SEL, "1.0", tk.END))

        self.stats_text.config(state='disabled')

    def get_encoding(self):
        if platform.system().lower() == "windows":
            return 'cp866'
        else:
            return 'utf-8'

    def parse_ping_time(self, line):
        patterns = [
            r'–≤—Ä–µ–º—è[=<](\d+)–º—Å',
            r'time[=<](\d+)ms',
            r'time=(\d+\.?\d*)\s*ms',
            r'–≤—Ä–µ–º—è=(\d+\.?\d*)\s*–º—Å'
        ]

        for pattern in patterns:
            match = re.search(pattern, line.lower())
            if match:
                return float(match.group(1))
        return None

    def update_stats_display(self):
        stats = self.ping_stats
        total = stats['sent']

        if total > 0:
            loss_percent = (stats['lost'] / total) * 100
        else:
            loss_percent = 0

        if stats['times']:
            avg_time = sum(stats['times']) / len(stats['times'])
            max_time = max(stats['times'])
            min_time = min(stats['times'])
        else:
            avg_time = max_time = min_time = 0

        stats_text = f"""–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ò–ù–ì–ê
{'-' * 30}

–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {stats['sent']}
–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['received']}
–ü–æ—Ç–µ—Ä—è–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {stats['lost']}
–ü–æ—Ç–µ—Ä—è: {loss_percent:.1f}%

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(stats['times'])} –ø–∏–Ω–≥–æ–≤:
–°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥: {avg_time:.1f} –º—Å
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max_time:.1f} –º—Å
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π:  {min_time:.1f} –º—Å

–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.ping_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
"""

        self.stats_text.config(state='normal')
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(tk.END, stats_text)
        self.stats_text.config(state='disabled')

    def ping_host(self):
        host = self.host.get()
        encoding = self.get_encoding()
        startupinfo = None

        self.root.after(0, self.update_history, host)

        if platform.system().lower() == "windows":
            command = ["ping", "-t", host]
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = subprocess.SW_HIDE
        else:
            command = ["ping", host]

        self.ping_running = True
        self.ping_stats = {'sent': 0, 'received': 0, 'lost': 0, 'times': deque(maxlen=20)}

        try:
            # üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
            self.ping_process = subprocess.Popen(command,
                                                 stdout=subprocess.PIPE,
                                                 stderr=subprocess.PIPE,
                                                 startupinfo=startupinfo)

            while self.ping_running:
                output = self.ping_process.stdout.readline()
                if output:
                    try:
                        decoded_output = output.decode(encoding, errors='ignore')

                        self.root.after(0, self._update_ping_text, decoded_output)

                        line_lower = decoded_output.lower()
                        if "–ø—Ä–µ–≤—ã—à–µ–Ω" in line_lower or "timeout" in line_lower or "timed out" in line_lower:
                            self.ping_stats['sent'] += 1
                            self.ping_stats['lost'] += 1
                        elif "–±–∞–π—Ç=" in line_lower or "bytes=" in line_lower or "ttl=" in line_lower:
                            self.ping_stats['sent'] += 1
                            self.ping_stats['received'] += 1
                            ping_time = self.parse_ping_time(decoded_output)
                            if ping_time:
                                self.ping_stats['times'].append(ping_time)

                        self.root.after(0, self.update_stats_display)

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                elif self.ping_process.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–∞–º –ø–æ —Å–µ–±–µ
                    break

        except Exception as e:
            self.root.after(0, self._show_ping_error, f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            self.ping_process = None

    def _update_ping_text(self, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏–Ω–≥–∞"""
        self.ping_text.insert(tk.END, text)
        self.ping_text.see(tk.END)

    def _show_ping_error(self, error_text):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∏–Ω–≥–∞"""
        self.ping_text.insert(tk.END, error_text + "\n")
        self.ping_text.see(tk.END)

    def trace_host(self):
        """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        host = self.host.get()
        encoding = self.get_encoding()

        self.root.after(0, self.update_history, host)

        self.root.after(0, self._start_trace_display, host)

        try:
            startupinfo = None

            if platform.system().lower() == "windows":
                command = ["tracert", "-h", "15", host]
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startupinfo.wShowWindow = subprocess.SW_HIDE

                # üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
                self.trace_process = subprocess.Popen(command,
                                                      stdout=subprocess.PIPE,
                                                      stderr=subprocess.PIPE,
                                                      startupinfo=startupinfo)
            else:
                command = ["traceroute", "-m", "15", host]
                # üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
                self.trace_process = subprocess.Popen(command, stdout=subprocess.PIPE,
                                                      stderr=subprocess.PIPE)

            while True:
                output = self.trace_process.stdout.readline()
                if output:
                    decoded_output = output.decode(encoding, errors='replace')
                    self.root.after(0, self._update_trace_text, decoded_output)
                elif self.trace_process.poll() is not None:
                    break

            stderr = self.trace_process.stderr.read()
            if stderr:
                decoded_error = stderr.decode(encoding, errors='replace')
                self.root.after(0, self._update_trace_text, f"\n–û—à–∏–±–∫–∏:\n{decoded_error}")

            self.root.after(0, self._finish_trace, self.trace_process.returncode)

        except subprocess.TimeoutExpired:
            self.root.after(0, self._update_trace_text, "\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É\n")
        except FileNotFoundError:
            self.root.after(0, self._update_trace_text, "\n–û—à–∏–±–∫–∞: tracert/traceroute –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
        except Exception as e:
            self.root.after(0, self._update_trace_text, f"\n–û—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: {e}\n")
        finally:
            self.trace_running = False
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–≥–¥–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            self.trace_process = None

    def _start_trace_display(self, host):
        """–ù–∞—á–∞–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        self.trace_text.delete(1.0, tk.END)
        self.trace_text.insert(tk.END, f"–ó–∞–ø—É—Å–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∫ {host}...\n\n")
        self.trace_text.see(tk.END)

    def _update_trace_text(self, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        self.trace_text.insert(tk.END, text)
        self.trace_text.see(tk.END)

    def _finish_trace(self, returncode):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        self.trace_text.insert(tk.END, f"\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: {returncode}\n")
        self.trace_text.insert(tk.END, "\n" + "=" * 50 + "\n")
        self.trace_text.see(tk.END)

    def start_ping(self):
        if not self.ping_running:
            self.ping_text.delete(1.0, tk.END)
            self.ping_text.insert(tk.END, f"–ó–∞–ø—É—Å–∫ –ø–∏–Ω–≥–∞ –∫ {self.host.get()}...\n")
            self.ping_text.see(tk.END)
            ping_thread = threading.Thread(target=self.ping_host)
            ping_thread.daemon = True
            ping_thread.start()

    def stop_ping(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∏–Ω–≥ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å OS."""
        self.ping_running = False

        # üåü –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–°—Ç–æ–ø"
        if self.ping_process and self.ping_process.poll() is None:
            try:
                self.ping_process.terminate()
            except Exception:
                pass
            self.ping_process = None
        # -------------------------------------------------------------

        self.ping_text.insert(tk.END, "\n–ü–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
        self.ping_text.see(tk.END)
        self.update_stats_display()

    def start_trace(self):
        if not self.trace_running:
            self.trace_running = True
            trace_thread = threading.Thread(target=self.trace_host)
            trace_thread.daemon = True
            trace_thread.start()

    def clear_all(self):
        self.ping_text.delete(1.0, tk.END)
        self.trace_text.delete(1.0, tk.END)

        self.stats_text.config(state='normal')
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.config(state='disabled')

        self.ping_stats = {'sent': 0, 'received': 0, 'lost': 0, 'times': deque(maxlen=20)}
        self.update_stats_display()


def main():
    root = tk.Tk()
    app = NetworkMonitor(root)
    root.mainloop()


if __name__ == "__main__":
    main()